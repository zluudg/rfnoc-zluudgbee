<?xml version="1.0"?>
<block>
  <name>RFNoC: zluudgbeeRX</name>
  <key>zluudgbee_zluudgbeeRX</key>
  <category>[zluudgbee]</category>
  <import>import zluudgbee</import>
  <make>zluudgbee.zluudgbeeRX(
          self.device3,
          uhd.stream_args( # TX Stream Args
                cpu_format="$type",
                otw_format="$otw",
                args="gr_vlen={0},{1}".format(${grvlen}, "" if $grvlen == 1 else "spp={0}".format($grvlen)),
          ),
          uhd.stream_args( # RX Stream Args
                cpu_format="$type",
                otw_format="$otw",
                args="gr_vlen={0},{1}".format(${grvlen}, "" if $grvlen == 1 else "spp={0}".format($grvlen)),
          ),
          $block_index,
          $device_index,
          $enable_eob_on_stop
  )
self.$(id).set_arg("symsync_mode", $symsync_mode)
self.$(id).set_arg("shift_threshold", $shift_threshold)
self.$(id).set_arg("decim_rate", $decim_rate)
self.$(id).set_arg("ma_line_depth", $ma_line_depth)
self.$(id).set_arg("shr_sens", $shr_sens)
self.$(id).set_arg("crappy_threshold", $crappy_threshold)
</make>
  <callback>set_arg("symsync_mode", $symsync_mode)</callback>
  <callback>set_arg("shift_threshold", $shift_threshold)</callback>
  <callback>set_arg("decim_rate", $decim_rate)</callback>
  <callback>set_arg("ma_line_depth", $ma_line_depth)</callback>
  <callback>set_arg("shr_sens", $shr_sens)</callback>
  <callback>set_arg("crappy_threshold", $crappy_threshold)</callback>

  <param>
    <name>Host Data Type</name>
    <key>type</key>
    <type>enum</type>
    <option>
      <name>Complex float32</name>
      <key>fc32</key>
      <opt>type:complex</opt>
    </option>
    <option>
      <name>Complex int16</name>
      <key>sc16</key>
      <opt>type:sc16</opt>
    </option>
  </param>

  <param>
    <name>Symsync Mode</name>
    <key>symsync_mode</key>
    <value>0</value>
    <type>int</type>
  </param>

  <param>
    <name>Shift Threshold</name>
    <key>shift_threshold</key>
    <value>0.35</value>
    <type>real</type>
  </param>

  <param>
    <name>Decimation Rate</name>
    <key>decim_rate</key>
    <value>100</value>
    <type>int</type>
  </param>

  <param>
    <name>MA-Line Depth</name>
    <key>ma_line_depth</key>
    <value>8</value>
    <type>int</type>
  </param>

  <param>
    <name>SHR Sensitivity</name>
    <key>shr_sens</key>
    <value>20</value>
    <type>int</type>
  </param>

  <param>
    <name>Crappy Threshold</name>
    <key>crappy_threshold</key>
    <value>8</value>
    <type>int</type>
  </param>
  <!--RFNoC basic block configuration -->
  <param>
    <name>Device Select</name>
    <key>device_index</key>
    <value>-1</value>
    <type>int</type>
    <hide>#if int($device_index()) &lt; 0 then 'part' else 'none'#</hide>
    <tab>RFNoC Config</tab>
  </param>

  <param>
    <name>zluudgRX Select</name>
    <key>block_index</key>
    <value>-1</value>
    <type>int</type>
    <hide>#if int($block_index()) &lt; 0 then 'part' else 'none'#</hide>
    <tab>RFNoC Config</tab>
  </param>

  <param>
    <name>Enable EOB on Stop</name>
    <key>enable_eob_on_stop</key>
    <value>True</value>
    <type>bool</type>
    <hide>#if $enable_eob_on_stop() == True then 'part' else 'none'#</hide>
    <tab>RFNoC Config</tab>
  </param>

  <param>
    <name>FPGA Module Name</name>
    <key>fpga_module_name</key>
    <value>noc_block_zluudgRX</value>
    <type>string</type>
    <hide>all</hide>
    <tab>RFNoC Config</tab>
  </param>

  <param>
    <name>Force Vector Length</name>
    <key>grvlen</key>
    <value>1</value>
    <type>int</type>
  </param>

  <param>
    <name>Device Format</name>
    <key>otw</key>
    <type>enum</type>
    <option>
      <name>Complex int16</name>
      <key>sc16</key>
    </option>
  </param>

  <!-- Make one 'sink' node per input. Sub-nodes:
       * name (an identifier for the GUI)
       * type
       * vlen
       * optional (set to 1 for optional inputs) -->
  <sink>
    <name>in</name>
    <type>$type.type</type>
    <vlen>$grvlen</vlen>
    <domain>rfnoc</domain>
  </sink>

  <!-- Make one 'source' node per output. Sub-nodes:
       * name (an identifier for the GUI)
       * type
       * vlen
       * optional (set to 1 for optional inputs) -->
  <source>
    <name>out</name>
    <type>$type.type</type>
    <vlen>$grvlen</vlen>
    <domain>rfnoc</domain>
  </source>
</block>
